{"ast":null,"code":"import _slicedToArray from \"/home/codeyourfuture/cat-age-totaller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/codeyourfuture/cat-age-totaller/src/AgeCounter.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport var AgeCounter = function AgeCounter(_ref) {\n  _s();\n\n  var cat = _ref.cat;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      count = _useState2[0],\n      setCount = _useState2[1];\n\n  function incrementCount() {\n    setCount(count + 1);\n  }\n\n  function setLife() {\n    setCount(0);\n  } // 5. Use a ternary operator to create a variable which has the value \"young\" when the age is less than 9 and \"old\" when the age is 9 or greater.\n  // Use string interpolation to add this variable as a class to the AgeCounter component.\n  // (i.g.if the age is 11, the AgeCounter should have \"AgeCounter\" and \"old\" as CSS classes).\n\n\n  function checkAge() {\n    return count >= 9 ? \"old\" : \"young\";\n  } // 6. Add a text input above the AgeCounters in AgeTotaller.js and button.\n  // Use this input and button to add a new cat name to the array.\n  // You will need to store the new cat name input in state(remember to use onChange to update it)\n  // and use the button to add the input to the array of cat names.\n  // Remember that you will want to use array destructuring here to create a new array.\n  // For example, if you had an array of numbers: `const numbers = [1, 2, 3]`,\n  //   you could create a new array like this: `const newNumbers = [...numbers, 4]`.newNumbers would then be[1, 2, 3, 4].\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AgeCounter \".concat(checkAge()),\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", cat]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\" Age count is \", count, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementCount,\n      children: \"Add year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onClick: function onClick(event) {\n        return setCount(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: setLife,\n      children: \"New life\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AgeCounter, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c = AgeCounter;\nexport default AgeCounter;\n\nvar _c;\n\n$RefreshReg$(_c, \"AgeCounter\");","map":{"version":3,"sources":["/home/codeyourfuture/cat-age-totaller/src/AgeCounter.js"],"names":["React","useState","AgeCounter","cat","count","setCount","incrementCount","setLife","checkAge","event","target","value"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAa;AAAA;;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AACrC,kBAA0BF,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOG,KAAP;AAAA,MAAcC,QAAd;;AAEA,WAASC,cAAT,GAA0B;AACxBD,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AACD,WAASG,OAAT,GAAmB;AACjBF,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GARoC,CAUrC;AACA;AACA;;;AAEA,WAASG,QAAT,GAAoB;AAClB,WAAOJ,KAAK,IAAI,CAAT,GAAa,KAAb,GAAqB,OAA5B;AACD,GAhBoC,CAkBrC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAK,IAAA,SAAS,uBAAgBI,QAAQ,EAAxB,CAAd;AAAA,4BACE;AAAA,sBAAML,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA,mCAAmBC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAQ,MAAA,OAAO,EAAEE,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAHF,eAIE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,OAAO,EAAE,iBAACG,KAAD;AAAA,eAAWJ,QAAQ,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAnB;AAAA;AAA5B;AAAA;AAAA;AAAA;AAAA,aAJF,eAKE;AAAQ,MAAA,OAAO,EAAEJ,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAUD,CApCM;;GAAML,U;;KAAAA,U;AAqCb,eAAeA,UAAf","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nexport const AgeCounter = ({ cat }) => {\n  const [count, setCount] = useState(0);\n\n  function incrementCount() {\n    setCount(count + 1);\n  }\n  function setLife() {\n    setCount(0);\n  }\n\n  // 5. Use a ternary operator to create a variable which has the value \"young\" when the age is less than 9 and \"old\" when the age is 9 or greater.\n  // Use string interpolation to add this variable as a class to the AgeCounter component.\n  // (i.g.if the age is 11, the AgeCounter should have \"AgeCounter\" and \"old\" as CSS classes).\n\n  function checkAge() {\n    return count >= 9 ? \"old\" : \"young\";\n  }\n\n  // 6. Add a text input above the AgeCounters in AgeTotaller.js and button.\n  // Use this input and button to add a new cat name to the array.\n  // You will need to store the new cat name input in state(remember to use onChange to update it)\n  // and use the button to add the input to the array of cat names.\n  // Remember that you will want to use array destructuring here to create a new array.\n  // For example, if you had an array of numbers: `const numbers = [1, 2, 3]`,\n  //   you could create a new array like this: `const newNumbers = [...numbers, 4]`.newNumbers would then be[1, 2, 3, 4].\n\n  return (\n    <div className={`AgeCounter ${checkAge()}`}>\n      <h1> {cat}</h1>\n      <h3> Age count is {count} </h3>\n      <button onClick={incrementCount}>Add year</button>\n      <input type=\"text\" onClick={(event) => setCount(event.target.value)} />\n      <button onClick={setLife}>New life</button>\n      {/* <input type=\"text\" onClick={(event) => setLife(event.target.value)} /> */}\n    </div>\n  );\n};\nexport default AgeCounter;\n"]},"metadata":{},"sourceType":"module"}