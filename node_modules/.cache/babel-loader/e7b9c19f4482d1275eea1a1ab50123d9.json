{"ast":null,"code":"import _toConsumableArray from \"/home/codeyourfuture/cat-age-totaller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/codeyourfuture/cat-age-totaller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/codeyourfuture/cat-age-totaller/src/AgeTotaller.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport AgeCounter from \"./AgeCounter\"; // 6. Add a text input above the AgeCounters in AgeTotaller.js and button.\n// Use this input and button to add a new cat name to the array.\n// You will need to store the new cat name input in state(remember to use onChange to update it)\n// and use the button to add the input to the array of cat names.\n// Remember that you will want to use array destructuring here to create a new array.\n// For example, if you had an array of numbers: `const numbers = [1, 2, 3]`,\n//   you could create a new array like this: `const newNumbers = [...numbers, 4]`.newNumbers would then be[1, 2, 3, 4].\n// Ensure that a cat can only be added if it's name is at least three letters long, and set the input back to being empty when a new cat is added.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar AgeTotaller = function AgeTotaller() {\n  _s();\n\n  var _useState = useState([\"Garfield\", \"Ollie\", \"Tom\", \"Meowmeow\"]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cats = _useState2[0],\n      setCats = _useState2[1];\n\n  var _useState3 = useState(\"0\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      newName = _useState4[0],\n      setNewName = _useState4[1];\n\n  function addNewName() {\n    var newNames = [].concat(_toConsumableArray(names), [newName]);\n    setCatName(newNames);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: function onChange(event) {\n        return setNewName(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNewName,\n      children: \"Add cat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AgeTotaller\",\n      children: cats.map(function (cat, index) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cats\",\n          children: /*#__PURE__*/_jsxDEV(AgeCounter, {\n            cat: cat\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"The total age is: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AgeTotaller, \"FDMRbwQNLUzqU7e15/1d5yU+vPI=\");\n\n_c = AgeTotaller;\nexport default AgeTotaller;\n\nvar _c;\n\n$RefreshReg$(_c, \"AgeTotaller\");","map":{"version":3,"sources":["/home/codeyourfuture/cat-age-totaller/src/AgeTotaller.js"],"names":["React","useState","AgeCounter","AgeTotaller","cats","setCats","newName","setNewName","addNewName","newNames","names","setCatName","event","target","value","map","cat","index"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA;;AACxB,kBAAwBF,QAAQ,CAAC,CAAC,UAAD,EAAa,OAAb,EAAsB,KAAtB,EAA6B,UAA7B,CAAD,CAAhC;AAAA;AAAA,MAAOG,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA8BJ,QAAQ,CAAC,GAAD,CAAtC;AAAA;AAAA,MAAOK,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,WAASC,UAAT,GAAsB;AACpB,QAAMC,QAAQ,gCAAOC,KAAP,IAAcJ,OAAd,EAAd;AACAK,IAAAA,UAAU,CAACF,QAAD,CAAV;AACD;;AAID,sBACE;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,kBAACG,KAAD;AAAA,eAAWL,UAAU,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAArB;AAAA;AAA7B;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAQ,MAAA,OAAO,EAAEN,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,eAGE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGJ,IAAI,CAACW,GAAL,CAAS,UAACC,GAAD,EAAMC,KAAN;AAAA,4BACR;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,GAAG,EAAED;AAAjB,aAA2BC,KAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,iBADQ;AAAA,OAAT;AADH;AAAA;AAAA;AAAA;AAAA,aAHF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAXF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CA1BD;;GAAMd,W;;KAAAA,W;AA4BN,eAAeA,WAAf","sourcesContent":["import React, { useState } from \"react\";\nimport AgeCounter from \"./AgeCounter\";\n\n// 6. Add a text input above the AgeCounters in AgeTotaller.js and button.\n// Use this input and button to add a new cat name to the array.\n// You will need to store the new cat name input in state(remember to use onChange to update it)\n// and use the button to add the input to the array of cat names.\n// Remember that you will want to use array destructuring here to create a new array.\n// For example, if you had an array of numbers: `const numbers = [1, 2, 3]`,\n//   you could create a new array like this: `const newNumbers = [...numbers, 4]`.newNumbers would then be[1, 2, 3, 4].\n\n// Ensure that a cat can only be added if it's name is at least three letters long, and set the input back to being empty when a new cat is added.\n\nconst AgeTotaller = () => {\n  const [cats, setCats] = useState([\"Garfield\", \"Ollie\", \"Tom\", \"Meowmeow\"]);\n  const [newName, setNewName] = useState(\"0\");\n\n  function addNewName() {\n    const newNames = [...names, newName];\n    setCatName(newNames);\n  }\n\n\n  \n  return (\n    <div>\n      <input type=\"text\" onChange={(event) => setNewName(event.target.value)} />\n      <button onClick={addNewName}>Add cat</button>\n      <div className=\"AgeTotaller\">\n        {cats.map((cat, index) => (\n          <div className=\"cats\">\n            <AgeCounter cat={cat} key={index} />\n          </div>\n        ))}\n      </div>\n\n      <h1>The total age is: </h1>\n    </div>\n  );\n};\n\nexport default AgeTotaller;\n"]},"metadata":{},"sourceType":"module"}